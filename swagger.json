{
  "swagger": "2.0",
  "info": {
    "description": "This is a simple TODO list using APIs." ,
    "version": "1.0.0",
    "title": "Swagger TODO list",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "apiteam@swagger.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "api.anunayisa.com",
  "basePath": "/v2",
  "tags": [
    {
      "name": "lists",
      "description": "Access to users TODO lists"
    },
    {
      "name": "user",
      "description": "Operations about user"
    }
  ],
  "schemes": [
    "https",
    "http"
  ],
  "paths": {
    "/lists": {
      "get": {
        "tags": [
          "lists"
        ],
        "summary": "Returns all lists",
        "description": "Returns a map of status codes to quantities",
        "operationId": "getLists",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "lists"
        ],
        "summary": "Creates a new list",
        "description": "Creates a new list",
        "operationId": "createList",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        }
      }
    },
    "/lists/{listID}": {
      "delete": {
        "tags": [
          "lists"
        ],
        "summary": "Deletes a list using listID",
        "description": "Returns a map of status codes to quantities",
        "operationId": "deleteList",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "lists"
        ],
        "summary": "Gets a list using listID",
        "description": "Returns a list using listID",
        "operationId": "getList",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        }
      }
    },
    "/lists/{listId}/tasks/": {
      "post": {
        "tags": [
          "lists"
        ],
        "summary": "Add a task to the specified list",
        "description": "",
        "operationId": "addTask",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Task to be added to list",
            "required": true,
            "schema": {
              "$ref": "#/definitions/List"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/List"
            }
          },
          "400": {
            "description": "Invalid List"
          }
        }
      }
    },
    "/lists/{listID}/tasks/{taskId}": {
      "delete": {
        "tags": [
          "lists"
        ],
        "summary": "Delete a task from the list using listID and taskID",
        "description": "Deletes a task from a list",
        "operationId": "deleteTaskById",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "ID of task that needs to be deleted",
            "required": true,
            "type": "integer",
            "maximum": 10,
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/List"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Task not found"
          }
        }
      },
      "patch": {
        "tags": [
          "lists"
        ],
        "summary": "Update a task in the list using listID and taskID",
        "description": "Updates a task from the given taskId",
        "operationId": "updateTask",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "ID of the task that needs to be updated",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Task not found"
          }
        }
      }
    },
    "/lists/{listId}/tasks/{taskID}/check": {
      "patch": {
        "tags": [
          "lists"
        ],
        "summary": "Checks a task off in a specified list",
        "description": "",
        "operationId": "checkTask",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Task to be checked to list",
            "required": true,
            "schema": {
              "$ref": "#/definitions/List"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/List"
            }
          },
          "400": {
            "description": "Invalid List"
          }
        }
      }
    },
    "/lists/diary/{diaryID}": {
      "get": {
        "tags": [
          "lists"
        ],
        "summary": "Get a note/diary from the list using listID and diaryID",
        "description": "Get a note from a list",
        "operationId": "getDiary",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "diaryID",
            "in": "path",
            "description": "ID of diary that needs to be retrieved",
            "required": true,
            "type": "integer",
            "maximum": 10,
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/List"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Diary not found"
          }
        }
      },
      "patch": {
        "tags": [
          "lists"
        ],
        "summary": "Update a diary in the list using listID and diaryID",
        "description": "Updates a dairy from the given diaryID",
        "operationId": "updateDiary",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "diaryID",
            "in": "path",
            "description": "ID of the diary that needs to be updated",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Diary not found"
          }
        }
      }
    },
    "/user": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create user",
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/login": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Logs user into the system",
        "description": "",
        "operationId": "loginUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "The user name for login",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for login in clear text",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            },
            "headers": {
              "X-Rate-Limit": {
                "type": "integer",
                "format": "int32",
                "description": "calls per hour allowed by the user"
              },
              "X-Expires-After": {
                "type": "string",
                "format": "date-time",
                "description": "date in UTC when token expires"
              }
            }
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        }
      }
    },
    "/user/{username}/{userID}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get user by user name and userID",
        "description": "",
        "operationId": "getUserByName",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
      "/user/{username}/{userID}/uploads": {
        "patch": {
          "tags": [
            "user"
          ],
          "summary": "Updates the users profile image",
          "description": "",
          "operationId": "updateProfile",
          "produces": [
            "application/xml",
            "application/json"
          ],
          "parameters": [
            {
              "name": "username",
              "in": "path",
              "description": "Upadate the given users profile image.",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "$ref": "#/definitions/User"
              }
            },
            "400": {
              "description": "Invalid username supplied"
            },
            "404": {
              "description": "User not found"
            }
          }
        }
      }
      },
      
  "definitions": {
    "List": {
      "type": "object",
      "properties": {
        "listId": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "isDiary": {
          "type": "boolean",
          "default": "false"
        },
        "check": {
          "type": "integer",
          "default": 0
        }
      },
      "xml": {
        "name": "List"
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      },
        "xml": {
          "name": "User"
      }
  },
    "Tag": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Tag"
      }
    },
    "ApiResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}